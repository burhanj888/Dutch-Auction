import React, { useState } from 'react';
import { ethers } from 'ethers';
import { Form, Row, Col, Button } from 'react-bootstrap';

const abi = [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numBlocksAuctionOpen",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offerPriceDecrement",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numBlockAuctionOpen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerPriceDecrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ];

const  bytecode = "0x6101206040526000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360146101000a81548160ff0219169083151502179055503480156200006f57600080fd5b5060405162000cb238038062000cb2833981810160405281019062000095919062000177565b82608081815250508160a081815250508060c08181525050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082620000fb919062000202565b836200010891906200024d565b60e0818152505043610100818152505060a051436200012891906200024d565b60028190555050505062000288565b600080fd5b6000819050919050565b62000151816200013c565b81146200015d57600080fd5b50565b600081519050620001718162000146565b92915050565b60008060006060848603121562000193576200019262000137565b5b6000620001a38682870162000160565b9350506020620001b68682870162000160565b9250506040620001c98682870162000160565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200020f826200013c565b91506200021c836200013c565b92508282026200022c816200013c565b91508282048414831517620002465762000245620001d3565b5b5092915050565b60006200025a826200013c565b915062000267836200013c565b9250828201905080821115620002825762000281620001d3565b5b92915050565b60805160a05160c05160e051610100516109de620002d460003960006105380152600061056e015260008181610517015261059e015260006104f1015260006105c201526109de6000f3fe60806040526004361061007b5760003560e01c80639bebc1801161004e5780639bebc1801461010b5780639d1b464a14610136578063d3642a8814610161578063db2e1eed1461018c5761007b565b806308551a53146100805780631998aeef146100ab5780637150d8ae146100b557806391f90157146100e0575b600080fd5b34801561008c57600080fd5b506100956101b7565b6040516100a29190610625565b60405180910390f35b6100b36101db565b005b3480156100c157600080fd5b506100ca6104a3565b6040516100d79190610661565b60405180910390f35b3480156100ec57600080fd5b506100f56104c9565b6040516101029190610661565b60405180910390f35b34801561011757600080fd5b506101206104ef565b60405161012d9190610695565b60405180910390f35b34801561014257600080fd5b5061014b610513565b6040516101589190610695565b60405180910390f35b34801561016d57600080fd5b5061017661059c565b6040516101839190610695565b60405180910390f35b34801561019857600080fd5b506101a16105c0565b6040516101ae9190610695565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360149054906101000a900460ff161561022b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102229061070d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b390610779565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361034a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610341906107e5565b60405180910390fd5b600254431061038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590610851565b60405180910390fd5b6000610398610513565b9050803410156103dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d4906108e3565b60405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610484573d6000803e3d6000fd5b506001600360146101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000436105629190610932565b61056c9190610966565b7f00000000000000000000000000000000000000000000000000000000000000006105979190610932565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061060f826105e4565b9050919050565b61061f81610604565b82525050565b600060208201905061063a6000830184610616565b92915050565b600061064b826105e4565b9050919050565b61065b81610640565b82525050565b60006020820190506106766000830184610652565b92915050565b6000819050919050565b61068f8161067c565b82525050565b60006020820190506106aa6000830184610686565b92915050565b600082825260208201905092915050565b7f41756374696f6e20636c6f736564000000000000000000000000000000000000600082015250565b60006106f7600e836106b0565b9150610702826106c1565b602082019050919050565b60006020820190508181036000830152610726816106ea565b9050919050565b7f41756374696f6e20436f6e636c75646564000000000000000000000000000000600082015250565b60006107636011836106b0565b915061076e8261072d565b602082019050919050565b6000602082019050818103600083015261079281610756565b9050919050565b7f53656c6c65727320617265206e6f7420616c6c6f77656420746f206275790000600082015250565b60006107cf601e836106b0565b91506107da82610799565b602082019050919050565b600060208201905081810360008301526107fe816107c2565b9050919050565b7f41756374696f6e20436c6f736564000000000000000000000000000000000000600082015250565b600061083b600e836106b0565b915061084682610805565b602082019050919050565b6000602082019050818103600083015261086a8161082e565b9050919050565b7f4269642076616c7565206d7573742062652067726561746572207468616e206f60008201527f7220657175616c20746f207468652063757272656e7420707269636500000000602082015250565b60006108cd603c836106b0565b91506108d882610871565b604082019050919050565b600060208201905081810360008301526108fc816108c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061093d8261067c565b91506109488361067c565b92508282039050818111156109605761095f610903565b5b92915050565b60006109718261067c565b915061097c8361067c565b925082820261098a8161067c565b915082820484148315176109a1576109a0610903565b5b509291505056fea2646970667358221220e992a2440745ad4f4b9951ff80a8cb510335015fb412999eccf6b85b17f8d61864736f6c63430008120033";

function ContractDeployer() {
  const [reservePrice, setReservePrice] = useState(0);
  const [numBlocksAuctionOpen, setNumBlocksAuctionOpen] = useState(0);
  const [offerPriceDecrement, setOfferPriceDecrement] = useState(0);
  const [contractAddress, setContractAddress] = useState(null);

  const handleDeploy = async () => {
    // create an instance of the Ethereum provider using Hardhat
    const provider = new ethers.providers.JsonRpcProvider();

    // create an instance of the signer using the provider
    const signer = provider.getSigner();

    // create a factory object using the ABI and signer
    const ContractFactory = new ethers.ContractFactory(abi, bytecode, signer);

    // deploy the contract with the constructor arguments
    const contract = await ContractFactory.deploy(
      reservePrice,
      numBlocksAuctionOpen,
      offerPriceDecrement
    );

    // wait for the contract to be mined
    await contract.deployed();

    // set the contract address in the state
    setContractAddress(contract.address);
  };

  return (
    
<Form className="border p-3 rounded">
<h4 className="text-left mb-4">Deploy Dutch Auction</h4>

  <Row className="mb-3">
    <Form.Group as={Col} xs={12} md={4}>
      <Form.Label>Reserve Price</Form.Label>
      <Form.Control type="number" onChange={(e) => setReservePrice(e.target.value)} />
    </Form.Group>

    <Form.Group as={Col} xs={12} md={4}>
      <Form.Label>Number of Blocks Auction Open</Form.Label>
      <Form.Control type="number" onChange={(e) => setNumBlocksAuctionOpen(e.target.value)} />
    </Form.Group>

    <Form.Group as={Col} xs={12} md={4}>
      <Form.Label>Offer Price Decrement</Form.Label>
      <Form.Control type="number" onChange={(e) => setOfferPriceDecrement(e.target.value)} />
    </Form.Group>
  </Row>

  <Button variant="primary" onClick={handleDeploy}>Deploy Contract</Button>

  {contractAddress && (
    <div className="mt-3">
      Contract deployed at address: {contractAddress}
    </div>
  )}
</Form>
  );
}

export default ContractDeployer;
